name: CI and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.set_version.outputs.version }}
      backend_image: ${{ steps.set_tags.outputs.backend_image }}
      frontend_image: ${{ steps.set_tags.outputs.frontend_image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      #####################################################
      # 1) Generate a random "version" (optional)
      #####################################################
      - name: Set version
        id: set_version
        run: |
          VERSION=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 8)
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "VERSION=${VERSION}" >> "$GITHUB_ENV"

      #####################################################
      # 2) Generate both "tag-only" and "full image" references
      #####################################################
      - name: Set image tags using current date/time
        id: set_tags
        run: |
          # Example for debugging:
          # Make sure these secrets are actually set in your repository's settings
          echo "DOCKERHUB_USERNAME is: ${{ secrets.DOCKERHUB_USERNAME }}"
          echo "DOCKERHUB_REPO is: ${{ secrets.DOCKERHUB_REPO }}"
          
          # Generate a timestamp-based suffix
          export TZ="America/Chicago"
          TIMESTAMP=$(date +"%m%d-%I%M%p")

          # Tag-only
          BACKEND_TAG="backend-${TIMESTAMP}"
          FRONTEND_TAG="frontend-${TIMESTAMP}"

          # Full image references (includes your Docker Hub username/repo)
          BACKEND_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:${BACKEND_TAG}"
          FRONTEND_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:${FRONTEND_TAG}"

          echo "------------------------------------------------------"
          echo "Generated backend tag:     $BACKEND_TAG"
          echo "Generated frontend tag:    $FRONTEND_TAG"
          echo "Generated backend image:   $BACKEND_IMAGE"
          echo "Generated frontend image:  $FRONTEND_IMAGE"
          echo "------------------------------------------------------"

          # Output for the rest of the job
          echo "backend_tag=$BACKEND_TAG"       >> "$GITHUB_OUTPUT"
          echo "frontend_tag=$FRONTEND_TAG"     >> "$GITHUB_OUTPUT"
          echo "backend_image=$BACKEND_IMAGE"   >> "$GITHUB_OUTPUT"
          echo "frontend_image=$FRONTEND_IMAGE" >> "$GITHUB_OUTPUT"

      #####################################################
      # 3) Build and push Docker images using "tag-only"
      #    (keeps your composite action usage unchanged)
      #####################################################
      - name: Build and push Backend Docker image
        uses: ./.github/actions/docker-image
        with:
          dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub_repo: ${{ secrets.DOCKERHUB_REPO }}
          dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}
          dockerfile: Dockerfile.backend
          image_tag: ${{ steps.set_tags.outputs.backend_tag }}
      
      - name: Build and push Frontend Docker image
        uses: ./.github/actions/docker-image
        with:
          dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub_repo: ${{ secrets.DOCKERHUB_REPO }}
          dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}
          dockerfile: Dockerfile.frontend
          image_tag: ${{ steps.set_tags.outputs.frontend_tag }}

  #####################################################
  # Optional test job could go here...
  #####################################################

  #####################################################
  # 4) Deploy job: references the job outputs above
  #####################################################
  deploy:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Print the image references
        run: |
          echo "BACKEND_IMAGE from build job: ${{ needs.build.outputs.backend_image }}"
          echo "FRONTEND_IMAGE from build job: ${{ needs.build.outputs.frontend_image }}"

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          echo "==== Terraform Plan with dynamic images ===="
          terraform plan \
            -var "backend_image=${{ needs.build.outputs.backend_image }}" \
            -var "frontend_image=${{ needs.build.outputs.frontend_image }}"

      - name: Terraform Apply
        working-directory: ./terraform
        run: |
          echo "==== Terraform Apply with dynamic images ===="
          terraform apply -auto-approve \
            -var "backend_image=${{ needs.build.outputs.backend_image }}" \
            -var "frontend_image=${{ needs.build.outputs.frontend_image }}"
